// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import QuartzCore;
@import CoreImage;
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import CoreFoundation;
@import Foundation;
@import PureLayout;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VFGCommonUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif








@interface CAMediaTimingFunction (SWIFT_EXTENSION(VFGCommonUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInSine;)
+ (CAMediaTimingFunction * _Nonnull)easeInSine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutSine;)
+ (CAMediaTimingFunction * _Nonnull)easeOutSine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutSine;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutSine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInQuad;)
+ (CAMediaTimingFunction * _Nonnull)easeInQuad SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutQuad;)
+ (CAMediaTimingFunction * _Nonnull)easeOutQuad SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutQuad;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutQuad SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInCubic;)
+ (CAMediaTimingFunction * _Nonnull)easeInCubic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutCubic;)
+ (CAMediaTimingFunction * _Nonnull)easeOutCubic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutCubic;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutCubic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInQuart;)
+ (CAMediaTimingFunction * _Nonnull)easeInQuart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutQuart;)
+ (CAMediaTimingFunction * _Nonnull)easeOutQuart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutQuart;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutQuart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInQuint;)
+ (CAMediaTimingFunction * _Nonnull)easeInQuint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutQuint;)
+ (CAMediaTimingFunction * _Nonnull)easeOutQuint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutQuint;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutQuint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInExpo;)
+ (CAMediaTimingFunction * _Nonnull)easeInExpo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutExpo;)
+ (CAMediaTimingFunction * _Nonnull)easeOutExpo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutExpo;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutExpo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInCirc;)
+ (CAMediaTimingFunction * _Nonnull)easeInCirc SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutCirc;)
+ (CAMediaTimingFunction * _Nonnull)easeOutCirc SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutCirc;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutCirc SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInBack;)
+ (CAMediaTimingFunction * _Nonnull)easeInBack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutBack;)
+ (CAMediaTimingFunction * _Nonnull)easeOutBack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOutBack;)
+ (CAMediaTimingFunction * _Nonnull)easeInOutBack SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM(NSInteger, ClickableCellStyle) {
  ClickableCellStyleNone = 0,
  ClickableCellStyleToggle = 1,
  ClickableCellStyleImage = 2,
  ClickableCellStyleDisclosureIndicator = 3,
  ClickableCellStyleExpandable = 4,
};


SWIFT_CLASS("_TtC11VFGCommonUI11ExpandStyle")
@interface ExpandStyle : NSObject
@property (nonatomic, copy) void (^ _Nullable onExpandComplete)(void);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI10ImageStyle")
@interface ImageStyle : NSObject
@property (nonatomic, copy) void (^ _Nullable onClickImageActionComplete)(void);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class UILabel;
@class NSCoder;

SWIFT_CLASS("_TtC11VFGCommonUI16PlanTextViewCell")
@interface PlanTextViewCell : UITableViewCell
/// Property to set cell title
@property (nonatomic, copy) NSString * _Nullable cellTitle;
@property (nonatomic, strong) NSAttributedString * _Nullable cellSeeMoreText;
@property (nonatomic, copy) NSString * _Nullable cellLinkTitle;
- (UILabel * _Nonnull)getSeeMoreLabel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI15SettingDelegate_")
@protocol SettingDelegate
- (void)itemDidSelectedWithTitle:(NSString * _Nonnull)title;
- (NSString * _Nonnull)userMsisdn SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI12SizeableView_")
@protocol SizeableView
/// Implement to calculate and return the desired height of the View.
///
/// returns:
/// The calculated height of the view.
- (CGFloat)getViewHeight SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11VFGCommonUI11ToggleStyle")
@interface ToggleStyle : NSObject
@property (nonatomic, copy) void (^ _Nullable onToggleActionComplete)(BOOL);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIColor (SWIFT_EXTENSION(VFGCommonUI))
/// Color - e60000
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGRed;)
+ (UIColor * _Nonnull)VFGRed SWIFT_WARN_UNUSED_RESULT;
/// Color - ffffff
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGWhite;)
+ (UIColor * _Nonnull)VFGWhite SWIFT_WARN_UNUSED_RESULT;
/// Color - 000000
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBlack;)
+ (UIColor * _Nonnull)VFGBlack SWIFT_WARN_UNUSED_RESULT;
/// Color - 999999
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGWarmGrey;)
+ (UIColor * _Nonnull)VFGWarmGrey SWIFT_WARN_UNUSED_RESULT;
/// Color - 666666
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBrownishGrey;)
+ (UIColor * _Nonnull)VFGBrownishGrey SWIFT_WARN_UNUSED_RESULT;
/// Color - 102 102 102
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBrownishDarkGrey;)
+ (UIColor * _Nonnull)VFGBrownishDarkGrey SWIFT_WARN_UNUSED_RESULT;
/// Color - 333333
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBlackTwo;)
+ (UIColor * _Nonnull)VFGBlackTwo SWIFT_WARN_UNUSED_RESULT;
/// Color - afafaf
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGGreyish;)
+ (UIColor * _Nonnull)VFGGreyish SWIFT_WARN_UNUSED_RESULT;
/// Color - dbdbdb
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGWhiteTwo;)
+ (UIColor * _Nonnull)VFGWhiteTwo SWIFT_WARN_UNUSED_RESULT;
/// Color - cccccc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGPinkishGrey;)
+ (UIColor * _Nonnull)VFGPinkishGrey SWIFT_WARN_UNUSED_RESULT;
/// Color - fafcfb
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGPaleGrey;)
+ (UIColor * _Nonnull)VFGPaleGrey SWIFT_WARN_UNUSED_RESULT;
/// Color - bd0000
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGDeepRed;)
+ (UIColor * _Nonnull)VFGDeepRed SWIFT_WARN_UNUSED_RESULT;
/// Color - 007e92
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOcean;)
+ (UIColor * _Nonnull)VFGOcean SWIFT_WARN_UNUSED_RESULT;
/// Color - c40c0c
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGRustyRed;)
+ (UIColor * _Nonnull)VFGRustyRed SWIFT_WARN_UNUSED_RESULT;
/// Color - ffffff 0.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGWhite20;)
+ (UIColor * _Nonnull)VFGWhite20 SWIFT_WARN_UNUSED_RESULT;
/// Color - 5e2750
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGTurquoiseBlue;)
+ (UIColor * _Nonnull)VFGTurquoiseBlue SWIFT_WARN_UNUSED_RESULT;
/// Color - 5e2750
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGGrape;)
+ (UIColor * _Nonnull)VFGGrape SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(VFGCommonUI))
/// Primary red colour as described in R5 design.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGPrimaryRed;)
+ (UIColor * _Nonnull)VFGPrimaryRed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGWhite30;)
+ (UIColor * _Nonnull)VFGWhite30 SWIFT_WARN_UNUSED_RESULT;
/// Primary gray colour as described in R5 design.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGPrimaryGray;)
+ (UIColor * _Nonnull)VFGPrimaryGray SWIFT_WARN_UNUSED_RESULT;
/// Second gray colour from infrastructure palette as described in R5 design.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGInfrastructureGray2;)
+ (UIColor * _Nonnull)VFGInfrastructureGray2 SWIFT_WARN_UNUSED_RESULT;
/// Third gray colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGInfrastructureGray3;)
+ (UIColor * _Nonnull)VFGInfrastructureGray3 SWIFT_WARN_UNUSED_RESULT;
/// Four gray colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGInfrastructureGray4;)
+ (UIColor * _Nonnull)VFGInfrastructureGray4 SWIFT_WARN_UNUSED_RESULT;
/// Background colour for common chipped view.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGChippViewBackground;)
+ (UIColor * _Nonnull)VFGChippViewBackground SWIFT_WARN_UNUSED_RESULT;
/// Vodafone Rhombus red colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGVodafoneRedRhombus;)
+ (UIColor * _Nonnull)VFGVodafoneRedRhombus SWIFT_WARN_UNUSED_RESULT;
/// Title colour for top bar title.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGTopBarTitleColor;)
+ (UIColor * _Nonnull)VFGTopBarTitleColor SWIFT_WARN_UNUSED_RESULT;
/// Refreshable View background color.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGRefreshableViewColor;)
+ (UIColor * _Nonnull)VFGRefreshableViewColor SWIFT_WARN_UNUSED_RESULT;
/// Refreshable View - expandable circle view background color.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGExpandableCircleColor;)
+ (UIColor * _Nonnull)VFGExpandableCircleColor SWIFT_WARN_UNUSED_RESULT;
/// Background colour for top bar when it is not transparent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGTopBarBackgroundColor;)
+ (UIColor * _Nonnull)VFGTopBarBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Application infrastructure colour 2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGInfrastructureColor2;)
+ (UIColor * _Nonnull)VFGInfrastructureColor2 SWIFT_WARN_UNUSED_RESULT;
/// Menu background colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGMenuBackground;)
+ (UIColor * _Nonnull)VFGMenuBackground SWIFT_WARN_UNUSED_RESULT;
/// Menu separator colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGMenuSeparator;)
+ (UIColor * _Nonnull)VFGMenuSeparator SWIFT_WARN_UNUSED_RESULT;
/// Speed checker download colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull VFGSpeedCheckerDownload;)
+ (UIColor * _Nonnull)VFGSpeedCheckerDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setVFGSpeedCheckerDownload:(UIColor * _Nonnull)newColor;
/// Speed checker upload colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull VFGSpeedCheckerUpload;)
+ (UIColor * _Nonnull)VFGSpeedCheckerUpload SWIFT_WARN_UNUSED_RESULT;
+ (void)setVFGSpeedCheckerUpload:(UIColor * _Nonnull)newColor;
/// Speed checker ping colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull VFGSpeedCheckerPing;)
+ (UIColor * _Nonnull)VFGSpeedCheckerPing SWIFT_WARN_UNUSED_RESULT;
+ (void)setVFGSpeedCheckerPing:(UIColor * _Nonnull)newColor;
/// Speed checker History view shadow colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGHistoryViewShadowColor;)
+ (UIColor * _Nonnull)VFGHistoryViewShadowColor SWIFT_WARN_UNUSED_RESULT;
/// Swipable cell delete button colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGSwipableCellRedColor;)
+ (UIColor * _Nonnull)VFGSwipableCellRedColor SWIFT_WARN_UNUSED_RESULT;
/// Scrollable TabBar enabled item colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGScrollableTabBarEnabledItemTintColor;)
+ (UIColor * _Nonnull)VFGScrollableTabBarEnabledItemTintColor SWIFT_WARN_UNUSED_RESULT;
/// Scrollable TabBar selected item colour.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGScrollableTabBarSelectedItemTintColor;)
+ (UIColor * _Nonnull)VFGScrollableTabBarSelectedItemTintColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayDefaultRed;)
+ (UIColor * _Nonnull)VFGOverlayDefaultRed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayOnTapRed;)
+ (UIColor * _Nonnull)VFGOverlayOnTapRed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayDisabledGrey;)
+ (UIColor * _Nonnull)VFGOverlayDisabledGrey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayDefaultSecondaryGray;)
+ (UIColor * _Nonnull)VFGOverlayDefaultSecondaryGray SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayOnTapSecondaryGray;)
+ (UIColor * _Nonnull)VFGOverlayOnTapSecondaryGray SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayDefaultTertiaryGray;)
+ (UIColor * _Nonnull)VFGOverlayDefaultTertiaryGray SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayOnTapTertiaryGray;)
+ (UIColor * _Nonnull)VFGOverlayOnTapTertiaryGray SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGOverlayBackground;)
+ (UIColor * _Nonnull)VFGOverlayBackground SWIFT_WARN_UNUSED_RESULT;
/// Previous bills bar chart - in plan gradient bottom color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBillingBarChartDarkCyan;)
+ (UIColor * _Nonnull)VFGBillingBarChartDarkCyan SWIFT_WARN_UNUSED_RESULT;
/// Previous bills bar chart - in plan gradient top color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBillingBarChartCyan;)
+ (UIColor * _Nonnull)VFGBillingBarChartCyan SWIFT_WARN_UNUSED_RESULT;
/// Previous bills bar chart - out of plan color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBillingBarChartPurple;)
+ (UIColor * _Nonnull)VFGBillingBarChartPurple SWIFT_WARN_UNUSED_RESULT;
/// Previous bills bar chart - grid labels font color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGBillingGridPinkishGrey;)
+ (UIColor * _Nonnull)VFGBillingGridPinkishGrey SWIFT_WARN_UNUSED_RESULT;
/// Chat Border - color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGChatBorderColor;)
+ (UIColor * _Nonnull)VFGChatBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Chat Border - color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull VFGChatStartChatButtonColor;)
+ (UIColor * _Nonnull)VFGChatStartChatButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Initializes UIColor for given hex value.
- (nonnull instancetype)initWithHex:(uint32_t)hex;
@end


@interface UIFont (SWIFT_EXTENSION(VFGCommonUI))
/// This method provides regular Vodafone font with size XXXX-Large.
+ (UIFont * _Nullable)VFGXXXXL SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size XXXX-Large.
+ (UIFont * _Nullable)VFGXXXXLBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size XXXX-Large.
+ (UIFont * _Nullable)VFGXXXXLLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular Vodafone font with size XXX-Large.
+ (UIFont * _Nullable)VFGXXXL SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size XXX-Large.
+ (UIFont * _Nullable)VFGXXXLBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size XXX-Large.
+ (UIFont * _Nullable)VFGXXXLLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size XX-Large.
+ (UIFont * _Nullable)VFGXXL SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size XX-Large.
+ (UIFont * _Nullable)VFGXXLBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size XX-Large.
+ (UIFont * _Nullable)VFGXXLLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size X-Large.
+ (UIFont * _Nullable)VFGXL SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size X-Large.
+ (UIFont * _Nullable)VFGXLBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size X-Large.
+ (UIFont * _Nullable)VFGXLLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular Vodafone font with size Large.
+ (UIFont * _Nullable)VFGL SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size Large.
+ (UIFont * _Nullable)VFGLBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size Large.
+ (UIFont * _Nullable)VFGLLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular Vodafone font with size medium.
+ (UIFont * _Nullable)VFGM SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size medium.
+ (UIFont * _Nullable)VFGMBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size medium.
+ (UIFont * _Nullable)VFGMLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular Vodafone font with size small.
+ (UIFont * _Nullable)VFGS SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font with size small
+ (UIFont * _Nullable)VFGSBold SWIFT_WARN_UNUSED_RESULT;
/// This method provides light Vodafone font with size small
+ (UIFont * _Nullable)VFGSLight SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular Vodafone font.
/// \param fontSize requested font size
///
///
/// returns:
/// Customized Vodafone regular UIFont object
+ (UIFont * _Nullable)vodafoneRegularFont:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
/// This method provides regular lite Vodafone font.
/// \param fontSize requested font size
///
///
/// returns:
/// Customized Vodafone lite regular UIFont object
+ (UIFont * _Nullable)vodafoneLiteRegularFont:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
/// This method provides bold Vodafone font.
/// \param fontSize requested font size
///
///
/// returns:
/// Customized Vodafone bold UIFont object
+ (UIFont * _Nullable)vodafoneBoldFont:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(VFGCommonUI))
+ (UIImage * _Nullable)fromColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
@end




@interface UIImage (SWIFT_EXTENSION(VFGCommonUI))
- (nullable instancetype)initFromCommonUINamed:(NSString * _Nonnull)name;
@property (nonatomic, readonly, strong) UIImage * _Nullable mirroredDown;
/// Image in grayscale, constructed from CIImage.
@property (nonatomic, readonly, strong) UIImage * _Nullable grayscaled;
/// Image with inverted colours, constructed from CIImage.
@property (nonatomic, readonly, strong) UIImage * _Nullable colorInverted;
/// Draw dotted image
+ (UIImage * _Nonnull)drawDottedImageWithWidth:(CGFloat)width height:(CGFloat)height color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface UILabel (SWIFT_EXTENSION(VFGCommonUI))
/// Change the lineheight of the text in UILabel
/// \param lineHeight CGFloat expressing the desired lineheight.
///
- (void)setLineHeightWithLineHeight:(CGFloat)lineHeight;
@end





@class VFGPullToRefreshControl;

@interface UIScrollView (SWIFT_EXTENSION(VFGCommonUI))
/// When calling this method, the <em>pull to refresh</em> feature is enabled to every <code>UIScrollView</code>
/// instance or subclass (such as <code>UITableView</code>).
/// Because of this feature is enabled via <em>runtime</em>, please remove it once it is no used.
/// It can be done by calling <code>removePullToRefresh()</code>.
/// <blockquote>
/// <em>Important:</em> In order to provide the expected “look-and-feel” to the “pull-to-refresh” component, <em>Bounces on Scroll</em> and <em>Clip to Bounds</em> need to be set to <code>true</code>.
///
/// </blockquote>
/// \param pullToRefreshControl <code>VFGPullToRefreshControl</code> instance.
///
/// \param action The action to be performed as part the refreshable feature.
///
- (void)addWithPullToRefreshControl:(VFGPullToRefreshControl * _Nonnull)pullToRefreshControl action:(void (^ _Nonnull)(void))action;
/// Removes the <code>VFGPullToRefreshControl</code> added by <code>add(pullToRefreshControl:action:)</code>.
- (void)removePullToRefreshControl;
/// Starts refreshing the <em>pull to refresh</em> control (added by <code>add(pullToRefreshControl:action:)</code>).
- (void)startRefreshing;
/// Stops refreshing the <em>pull to refresh</em> control (added by <code>add(pullToRefreshControl:action:)</code>).
- (void)stopRefreshingWithFailureMessage:(NSString * _Nullable)failureMessage;
@end


@interface UIScrollView (SWIFT_EXTENSION(VFGCommonUI))
/// <code>VFGPullToRefreshControl</code> instance added when calling <code>add(pullToRefreshControl:action:)</code>.
/// <blockquote>
/// This property is only available when importing the <code>VFGCommonUI</code> module.
///
/// </blockquote>
@property (nonatomic, readonly, strong) VFGPullToRefreshControl * _Nullable pullToRefreshControl;
@end






@interface UIView (SWIFT_EXTENSION(VFGCommonUI))
- (void)rotate:(CGFloat)toValue duration:(CFTimeInterval)duration;
- (void)addChatBorderWithColor:(UIColor * _Nonnull)color;
@end

@class UIViewController;

@interface UIView (SWIFT_EXTENSION(VFGCommonUI))
/// This method provides horizontal animation from the current point “predefined” to the target point.
/// \param targetView the view that will be moved with animation
///
/// \param to the view the destination point
///
/// \param animationDuration the animation duration
///
+ (void)animateHorizontallyWithTargetView:(UIView * _Nonnull)targetView to:(CGFloat)destinationPoint animationDuration:(NSTimeInterval)animationDuration;
/// This method provides horizontal slide animation from the current view controller to another view controller.
/// \param oldVC the current view controller
///
/// \param newVC the view controller that we want to navigate to
///
/// \param containerView the parent view controller that will contain all this animation
///
/// \param isForward the slide animation direction “Forward/Backward”
///
/// \param animationDuration the animation duration
///
+ (void)cycleFromViewControllerWithOldVC:(UIViewController * _Nonnull)oldVC newVC:(UIViewController * _Nonnull)newVC containerView:(UIView * _Nonnull)containerView isForward:(BOOL)isForward animationDuration:(NSTimeInterval)animationDuration completionHandler:(void (^ _Nullable)(void))completionHandler;
/// This method adds shadow effect to a specific view.
/// \param view the targeted view that we want to add shadow to
///
/// \param shadowColor the shadow color
///
/// \param shadowOpacity the shadow opacity
///
/// \param shadowRadius the shadow radius
///
+ (void)addShadowEffectWithView:(UIView * _Nonnull)view shadowColor:(UIColor * _Nonnull)shadowColor shadowOpacity:(float)shadowOpacity shadowRadius:(CGFloat)shadowRadius;
/// This method provides Scale Animation to a specific view.
/// <ul>
///   <li>
///     targetView view: the targeted view that we want to add shadow to
///   </li>
/// </ul>
/// \param animationDuration the animaiton Duration
///
/// \param scaleFactor the animaiton Scale Factor
///
/// \param animationDelay Delay of the animation
///
+ (void)scaleAnimationWithTargetView:(UIView * _Nonnull)targetView animationDuration:(NSTimeInterval)animationDuration scaleFactor:(double)scaleFactor animationDelay:(double)animationDelay;
/// This method provides fading animation for a specific view
/// \param animationDuration the needed time to finish this animation
///
/// \param opacity the faded view opacity
///
/// \param targetView the view that we will apply the fading animation on
///
+ (void)fadeViewWithAnimationDuration:(NSTimeInterval)animationDuration opacity:(CGFloat)opacity targetView:(UIView * _Nonnull)targetView;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@end

@class VFGRootViewController;

@interface UIViewController (SWIFT_EXTENSION(VFGCommonUI))
/// Root view controller to which stack this view controller is added. nil if view controller is not added to stack.
@property (nonatomic, readonly, strong) VFGRootViewController * _Nullable rootViewController;
@end

@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC11VFGCommonUI20UPCarouselFlowLayout")
@interface UPCarouselFlowLayout : UICollectionViewFlowLayout
@property (nonatomic) CGFloat sideItemScale;
@property (nonatomic) CGFloat sideItemAlpha;
@property (nonatomic) CGFloat sideItemShift;
@property (nonatomic) CGFloat sideItemYOffset;
@property (nonatomic) CGFloat sideItemXOffset;
- (void)prepareLayout;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC11VFGCommonUI22VFGAlertViewController")
@interface VFGAlertViewController : UIViewController <UIScrollViewDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectionErrorAlertTitle;)
+ (NSString * _Nonnull)connectionErrorAlertTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectionErrorAlertMessage;)
+ (NSString * _Nonnull)connectionErrorAlertMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectionErrorAlertOkTitle;)
+ (NSString * _Nonnull)connectionErrorAlertOkTitle SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
+ (void)showAlertWithTitle:(NSString * _Nullable)alertTitle alertMessage:(NSString * _Nonnull)alertMessage alertSubmessage:(NSString * _Nonnull)alertSubmessage primaryButtonText:(NSString * _Nonnull)primaryButtonText primaryButtonAction:(void (^ _Nullable)(void))primaryButtonAction secondaryButtonText:(NSString * _Nullable)secondaryButtonText secondaryButtonAction:(void (^ _Nullable)(void))secondaryButtonAction tertiaryButtonText:(NSString * _Nullable)tertiaryButtonText tertiaryButtonAction:(void (^ _Nullable)(void))tertiaryButtonAction closeButtonAction:(void (^ _Nullable)(void))closeButtonAction icon:(UIImage * _Nullable)icon;
+ (void)showAlertWithTitle:(NSString * _Nullable)alertTitle alertMessage:(NSString * _Nonnull)alertMessage alertSubmessage:(NSString * _Nonnull)alertSubmessage primaryButtonText:(NSString * _Nonnull)primaryButtonText primaryButtonAction:(void (^ _Nullable)(void))primaryButtonAction secondaryButtonText:(NSString * _Nullable)secondaryButtonText secondaryButtonAction:(void (^ _Nullable)(void))secondaryButtonAction tertiaryButtonText:(NSString * _Nullable)tertiaryButtonText tertiaryButtonAction:(void (^ _Nullable)(void))tertiaryButtonAction closeButtonAction:(void (^ _Nullable)(void))closeButtonAction icon:(UIImage * _Nullable)icon showCloseButton:(BOOL)closeButtonVisible;
+ (void)showAlertWithSubViewWithTitle:(NSString * _Nullable)titleString view:(UIView * _Nullable)subview showCloseButton:(BOOL)closeButtonVisible closeButtonAction:(void (^ _Nullable)(void))closeButtonAction;
+ (void)showAlertWithSubViewWithView:(UIView * _Nonnull)subView;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Extended UIButton with extra badge for displaying count or other pieces of information
SWIFT_CLASS("_TtC11VFGCommonUI14VFGBadgeButton")
@interface VFGBadgeButton : UIButton
/// Displayed badge string
@property (nonatomic, copy) NSString * _Nullable badgeString;
/// Badge’s background color
@property (nonatomic, strong) UIColor * _Nullable badgeBackgroundColor;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Badge view
SWIFT_CLASS("_TtC11VFGCommonUI12VFGBadgeView")
@interface VFGBadgeView : UIView
@property (nonatomic) CGRect frame;
/// Text displayed on badge
@property (nonatomic, copy) NSString * _Nullable text;
/// Badge text colour
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Badge text font
@property (nonatomic, strong) UIFont * _Nonnull font;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI16VFGBaseTextField")
@interface VFGBaseTextField : UITextField
/// Used by storyboard to layout the view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Used by the OS to initialize the view from a storyboard
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Uset to setup the textfield with custom image for the right view button and a callback
- (void)setupTextFieldWithCustomImage:(UIImage * _Nonnull)customImage buttonCallBack:(void (^ _Nullable)(void))buttonCallBack;
/// Use to disable the field and apply the disabled style
- (void)disableField;
/// Use to enable the field and apply the basic style
- (void)enableField;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)rightViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI15VFGViewProtocol_")
@protocol VFGViewProtocol
@optional
/// Set loading message of the loading indicator
/// \param message the message to be shown
///
- (void)setLoadingMessage:(NSString * _Nonnull)message;
/// Shows loading indicator on the view
- (void)showLoadingIndicator;
/// Shows loading indicator on the view
/// @param backgroundImage optinal UIImage
/// @param backgroundColor UIColor with defult value gray color
- (void)showLoadingIndicatorWithBackgroundImage:(UIImage * _Nullable)backgroundImage backgroundColor:(UIColor * _Nonnull)backgroundColor;
/// Hides the loading indicator from the view
- (void)hideLoadingIndicator;
@end


SWIFT_CLASS("_TtC11VFGCommonUI21VFGBaseViewController")
@interface VFGBaseViewController : UIViewController <VFGViewProtocol>
- (void)viewDidLoad;
/// Set loading message of the loading indicator
/// \param message the message to be shown
///
- (void)setLoadingMessage:(NSString * _Nonnull)message;
/// Shows loading indicator on the view
- (void)showLoadingIndicator;
- (void)showLoadingIndicatorWithBackgroundImage:(UIImage * _Nullable)backgroundImage backgroundColor:(UIColor * _Nonnull)backgroundColor;
/// Hides the loading indicator from the view
- (void)hideLoadingIndicator;
/// Updates loading indicator’s label position relative to the spinner
/// \param position takes a value .top or .bottom to update the text position (Only Top and Botton positions are supported)
///
- (void)updateLoadingIndicatorLabelPositionWithPosition:(ALEdge)position;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Your table view class should subclass VFGBlockableTableView. If the screen is created using Storyboards your table view UI custom class should be set to your own. At this point you can start using VFGSwipeableTableViewCells in your table view.
SWIFT_CLASS("_TtC11VFGCommonUI21VFGBlockableTableView")
@interface VFGBlockableTableView : UITableView
/// Informs if any table view cell displays options.
@property (nonatomic, readonly) BOOL isCellOptionsVisible;
/// Hide options of cells.
/// \param withAnimation animate hiding of options, defaults to false.
///
- (void)hideCellOptionsWithAnimation:(BOOL)animation;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
@end

enum BubbleTransitionMode : NSInteger;

/// A custom modal transition that presents and dismiss a controller with an expanding bubble effect.
/// <ul>
///   <li>
///     Prepare the transition:
///   </li>
/// </ul>
/// \code
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
/// let controller = segue.destination
/// controller.transitioningDelegate = self
/// controller.modalPresentationStyle = .custom
/// }
///
/// \endcode<ul>
///   <li>
///     Implement UIViewControllerTransitioningDelegate:
///   </li>
/// </ul>
/// \code
/// func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
/// transition.transitionMode = .present
/// transition.startingPoint = someButton.center
/// transition.bubbleColor = someButton.backgroundColor!
/// return transition
/// }
///
/// func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
/// transition.transitionMode = .dismiss
/// transition.startingPoint = someButton.center
/// transition.bubbleColor = someButton.backgroundColor!
/// return transition
/// }
///
/// \endcode
SWIFT_CLASS("_TtC11VFGCommonUI19VFGBubbleTransition")
@interface VFGBubbleTransition : NSObject
/// The point that originates the bubble. The bubble starts from this point
/// and shrinks to it on dismiss
@property (nonatomic) CGPoint startingPoint;
/// The transition duration. The same value is used in both the Present or Dismiss actions
/// Defaults to <code>0.5</code>
@property (nonatomic) double duration;
@property (nonatomic) double opacityDuration;
@property (nonatomic) double chabgeColorDuration;
@property (nonatomic, strong) UIColor * _Nonnull bubbleGrayColor;
/// The transition direction. Possible values <code>.present</code>, <code>.dismiss</code> or <code>.pop</code>
/// Defaults to <code>.Present</code>
@property (nonatomic) enum BubbleTransitionMode transitionMode;
/// The color of the bubble. Make sure that it matches the destination controller’s background color.
@property (nonatomic, strong) UIColor * _Nonnull bubbleColor;
@property (nonatomic, readonly, strong) UIView * _Nonnull bubble;
@property (nonatomic, strong) UIView * _Nonnull clipedView;
@property (nonatomic, strong) UIView * _Nonnull shadowView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The possible directions of the transition.
/// <ul>
///   <li>
///     Present: For presenting a new modal controller
///   </li>
///   <li>
///     Dismiss: For dismissing the current controller
///   </li>
///   <li>
///     Pop: For a pop animation in a navigation controller
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, BubbleTransitionMode) {
  BubbleTransitionModePresent = 0,
  BubbleTransitionModeDismiss = 1,
  BubbleTransitionModePop = 2,
};



@protocol UIViewControllerContextTransitioning;

@interface VFGBubbleTransition (SWIFT_EXTENSION(VFGCommonUI)) <UIViewControllerAnimatedTransitioning>
/// Required by UIViewControllerAnimatedTransitioning
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
/// Required by UIViewControllerAnimatedTransitioning
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI19VFGCarouselDelegate_")
@protocol VFGCarouselDelegate
- (UIImage * _Nullable)carouselCellImageForIndex:(NSInteger)index isSelected:(BOOL)isSelected SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getCurrentCarouselIndex SWIFT_WARN_UNUSED_RESULT;
@end

@class VFGModelCarouselItem;

SWIFT_CLASS("_TtC11VFGCommonUI15VFGCarouselView")
@interface VFGCarouselView : UIView <VFGViewProtocol>
@property (nonatomic, copy) void (^ _Nullable carouselItemDidChangeCallback)(VFGModelCarouselItem * _Nonnull);
/// The delegate for VFGCarouselView
@property (nonatomic, weak) id <VFGCarouselDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame carouselItemDidChange:(void (^ _Nonnull)(VFGModelCarouselItem * _Nonnull))carouselItemDidChange;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)refreshSelectedCarouselItemWithList:(NSArray<VFGModelCarouselItem *> * _Nonnull)list;
@end


@interface VFGCarouselView (SWIFT_EXTENSION(VFGCommonUI)) <UICollectionViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end

@class UICollectionView;
@class UICollectionViewCell;

@interface VFGCarouselView (SWIFT_EXTENSION(VFGCommonUI)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// Class providing parameters to create custom cell option button, VFGCellOptionsButton.
SWIFT_CLASS("_TtC11VFGCommonUI13VFGCellOption")
@interface VFGCellOption : NSObject
/// Create parameters for custom cell option button
/// \param text text displayed on option button
///
/// \param image image displayed on option button
///
/// \param textColor color of text displayed on options button
///
/// \param backgroundColor background color of options button
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text image:(UIImage * _Nullable)image textColor:(UIColor * _Nullable)textColor backgroundColor:(UIColor * _Nullable)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Button for custom cell option. Used with VFGCellOptionsView
SWIFT_CLASS("_TtC11VFGCommonUI20VFGCellOptionsButton")
@interface VFGCellOptionsButton : UIButton
/// Creates button based on option parameters
/// \param option option based on which button is created
///
- (nonnull instancetype)initWithOption:(VFGCellOption * _Nonnull)option OBJC_DESIGNATED_INITIALIZER;
/// Do not call this, because we don’t have option parameter
/// \param coder Decoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View containing options buttons.
SWIFT_CLASS("_TtC11VFGCommonUI18VFGCellOptionsView")
@interface VFGCellOptionsView : UIView
/// Buttons representing cell custom options.
@property (nonatomic, readonly, copy) NSArray<VFGCellOptionsButton *> * _Nonnull buttons;
/// Create view with option buttons with given parameters
/// \param withOptions options buttons parameters
///
- (nonnull instancetype)initWithOptions:(NSArray<VFGCellOption *> * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11VFGCommonUI15VFGCheckBoxView")
@interface VFGCheckBoxView : UIView
@property (nonatomic, copy) void (^ _Nullable onCheckComplete)(BOOL);
/// Property to assign checkbox enable or disabled
@property (nonatomic) BOOL isEnabled;
/// Property to assign view title
@property (nonatomic, copy) NSString * _Nullable viewTitle;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI20VFGChippedShadowView")
@interface VFGChippedShadowView : UIView
@property (nonatomic, strong) UIColor * _Nullable visibleBackgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC11VFGCommonUI14VFGChippedView")
@interface VFGChippedView : UIView
@property (nonatomic) CGFloat chipHeight;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI16VFGClickableCell")
@interface VFGClickableCell : UITableViewCell
@property (nonatomic, strong) ToggleStyle * _Nullable toggleStyle;
@property (nonatomic, strong) ImageStyle * _Nullable imageStyle;
@property (nonatomic, strong) ExpandStyle * _Nullable expandStyle;
/// Property to set cell title
@property (nonatomic, copy) NSString * _Nullable cellTitle;
/// Property to set cell sub-title
@property (nonatomic, copy) NSString * _Nullable cellSubTitle;
/// Property to set strip view color
@property (nonatomic, strong) UIColor * _Nullable stripViewColor;
/// Property to assign strip view visibility
@property (nonatomic) BOOL stripViewHidden;
/// Property to assign image button incase your cell of type image
@property (nonatomic, strong) UIImage * _Nullable cellImage;
- (void)awakeFromNib;
- (void)setImageAction:(void (^ _Nonnull)(void))action;
- (void)setToggleAction:(void (^ _Nonnull)(BOOL))action;
- (void)setExpandAction:(void (^ _Nonnull)(void))action;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class VFGTopBarScrollDelegate;
@class VFGCommonHeaderContentController;

/// Object of this class serve as container for other view controllers.
/// This class provides chipped view, image background and possibility to scroll the view. Contained viewss are put inside chipped view
SWIFT_CLASS("_TtC11VFGCommonUI34VFGCommonHeaderContainerController")
@interface VFGCommonHeaderContainerController : UIViewController
/// content Top Margin To TopBar, default = 93.0
@property (nonatomic) CGFloat contentTopMarginToTopBar;
/// Title of header presented above chipped view.
@property (nonatomic, copy) NSString * _Nullable headerTitle;
/// The background image of the container controller.
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
@property (nonatomic, strong) VFGTopBarScrollDelegate * _Nullable rootViewControllerContentTopBarScrollDelegate;
@property (nonatomic) BOOL topBarRightButtonHidden;
@property (nonatomic, copy) NSString * _Nonnull rootViewControllerContentTopBarTitle;
@property (nonatomic, strong) UIViewController * _Nullable containedController;
@property (nonatomic, strong) VFGCommonHeaderContentController * _Nullable scrollableContainedViewController;
/// Creates common header component with not scrollable container views
/// \param withViewController View controller which will be put inside this controller
///
+ (VFGCommonHeaderContainerController * _Nonnull)commonHeaderContainerControllerWithViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Creates common header component with scrollable container views
/// \param withViewController View controller which will be put inside this controller and based on which scroll the container views will be moved
///
+ (VFGCommonHeaderContainerController * _Nonnull)scrollableCommonHeaderContainerControllerWithViewController:(VFGCommonHeaderContentController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for all view controllers that are put inside VFGCommonHeaderContainerController.
SWIFT_CLASS("_TtC11VFGCommonUI32VFGCommonHeaderContentController")
@interface VFGCommonHeaderContentController : UIViewController
/// Callback which should be called by VFGCommonHeaderContentController when content is scrolled.
/// Purpose of this callback is to inform container (VFGCommonHeaderContainerController) that its views should be scrolled (chipped view and shadow view).
@property (nonatomic, copy) void (^ _Nullable adjustedScrollOffsetChangedCallback)(CGFloat);
/// Initial y position of content presented by VFGCommonHeaderContentController view controller. Initial y position is below chip of chipped view.
@property (nonatomic) CGFloat originY;
/// Called to inform view controller where to place content view.
/// \param areaRect Frame in which content view is placed.
///
- (void)layoutContentInArea:(CGRect)areaRect;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI17VFGCommonUIBundle")
@interface VFGCommonUIBundle : NSObject
+ (NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSBundle * _Nullable)customBundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Common sizes for UI components and device elements.
SWIFT_CLASS("_TtC11VFGCommonUI16VFGCommonUISizes")
@interface VFGCommonUISizes : NSObject
/// Height of status bar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat statusBarHeight;)
+ (CGFloat)statusBarHeight SWIFT_WARN_UNUSED_RESULT;
/// Clickable area size.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat minClickableAreaSize;)
+ (CGFloat)minClickableAreaSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI24VFGConfigurableAlertView")
@interface VFGConfigurableAlertView : UIViewController
/// A method that configures and returns an overlay configurable View
/// \param title the title text to view on the overlay
///
/// \param header the header paragraph of the view
///
/// \param img The image to show
///
/// \param imgHeight the desired image height
///
/// \param imgWidth the desired image width
///
/// \param paragraph the subparagraph to show below the image
///
/// \param closeButtonCallback the close button callback
///
///
/// returns:
/// an instanse of the configurable AlertView
+ (VFGConfigurableAlertView * _Nullable)configureViewWithTitle:(NSString * _Nonnull)title header:(NSString * _Nullable)header img:(UIImage * _Nullable)img imgHeight:(float)imgHeight imgWidth:(float)imgWidth paragraph:(NSString * _Nullable)paragraph closeButtonCallback:(void (^ _Nullable)(void))closeButtonCallback SWIFT_WARN_UNUSED_RESULT;
/// Use to change the padding between the overlay title and the injected view
- (VFGConfigurableAlertView * _Nonnull)topPadding:(float)padding SWIFT_WARN_UNUSED_RESULT;
/// Call this method to show the alert view
- (void)show;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI22VFGExpandedContentCell")
@interface VFGExpandedContentCell : UITableViewCell
/// Property to set cell title
@property (nonatomic, copy) NSString * _Nullable cellTitle;
/// Property to set strip view color
@property (nonatomic, strong) UIColor * _Nullable stripViewColor;
/// Property to assign strip view visibility
@property (nonatomic) BOOL stripViewHidden;
- (void)awakeFromNib;
- (void)prepareForReuse;
@property (nonatomic) BOOL isExpanded;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI32VFGExpandedContentWithButtonCell")
@interface VFGExpandedContentWithButtonCell : UITableViewCell
@property (nonatomic, copy) NSString * _Null_unspecified cardTitle;
- (void)awakeFromNib;
- (void)prepareForReuse;
@property (nonatomic) BOOL isExpanded;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI21VFGFloatingBubbleView")
@interface VFGFloatingBubbleView : UIView <UIViewControllerTransitioningDelegate>
@property (nonatomic, strong) UIViewController * _Nullable presentedViewController;
@property (nonatomic) BOOL isSecondLevel;
- (void)scaleWhiteBubble;
- (void)playExplotionAnimation;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) void (^ _Nullable clickAction)(void);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setBubbleTitleWithTitle:(NSString * _Nonnull)title;
- (void)setSecondLevel:(BOOL)isSecondLevel;
- (void)setHasNewNotification:(BOOL)hasNotification;
- (BOOL)isFloatingBubbleInNotificationState SWIFT_WARN_UNUSED_RESULT;
/// Start Splash Animations
- (void)playExpandAnimation;
- (void)startBubbleAnimationsWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController;
- (void)startBubbleAnimationsWithDelayWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController;
- (double)getExpectedAnimationDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11VFGCommonUI14VFGHeaderLabel")
@interface VFGHeaderLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Class responsible for downloading image for given URL.
SWIFT_CLASS("_TtC11VFGCommonUI18VFGImageDownloader")
@interface VFGImageDownloader : NSObject
/// URL from which image is downloaded.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// Callback called when image was successfully downloaded or not.
@property (nonatomic, readonly, copy) void (^ _Nullable downloadCompletedCallback)(UIImage * _Nullable);
/// Create object responsible for downloading image from given url.
/// \param imageURL URL of image to download
///
/// \param completion callback called when image is downloaded
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nullable)imageURL completion:(void (^ _Nullable)(UIImage * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
/// Start downloading image from given url. Call completion block when downloaded successfully or not.
- (void)start;
/// Cancel download, do not call completion block.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol VFGLoadingIndicatorViewProtocol;

SWIFT_CLASS("_TtC11VFGCommonUI19VFGLoadingIndicator")
@interface VFGLoadingIndicator : UIView
@property (nonatomic, strong) id <VFGLoadingIndicatorViewProtocol> _Null_unspecified delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGRect frame;
/// sets the loading message of the loading indicator
/// \param message message to be shown
///
- (void)setLoadingMessage:(NSString * _Nonnull)message;
/// Updates label position relative to the spinner
/// \param position takes a value .top or .bottom to update the text position (Only Top and Botton positions are supported)
///
- (void)updateTextPositionToPosition:(ALEdge)position;
- (nonnull instancetype)initWithDelegate:(id <VFGLoadingIndicatorViewProtocol> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)showLoading;
- (void)hideLoading;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI31VFGLoadingIndicatorViewProtocol_")
@protocol VFGLoadingIndicatorViewProtocol
@optional
- (BOOL)hasBackButton SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMenuButton SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)getBackgroundImage SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLoadingMessage SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getThemeColor SWIFT_WARN_UNUSED_RESULT;
- (BOOL)showAppSectionAsBackground SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasDimmedBackground SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowVodafoneLogo SWIFT_WARN_UNUSED_RESULT;
@required
/// ///Required methods
- (void)backButtonCallback;
- (void)MenuButtonCallback;
@end


SWIFT_CLASS("_TtC11VFGCommonUI14VFGLoadingView")
@interface VFGLoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame loadingMessage:(NSString * _Nullable)loadingMessage OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)startAnimating;
- (void)stopAnimating;
- (void)awakeFromNib;
- (void)setLoadingViewControllerWithLoadingViewController:(VFGLoadingIndicator * _Nullable)loadingViewController;
- (void)setHasBackButtonWithHasButton:(BOOL)hasButton;
- (void)sethasMenuButtonWithHasButton:(BOOL)hasButton;
- (void)setBackgroundImageWithImage:(UIImage * _Nonnull)image;
- (void)setLoadingThemeColorWithColor:(UIColor * _Nonnull)color;
- (void)setLoadingMessageTxTWithMessage:(NSString * _Nonnull)message;
- (void)setHasDimmedBackgroundWithIsDimmed:(BOOL)isDimmed;
- (void)setShowAppSectionAsBackgroundWithAppSectionAsBackground:(BOOL)appSectionAsBackground;
- (void)changeSpinnerSizeWithCustomSize:(CGFloat)customSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11VFGCommonUI20VFGModelCarouselItem")
@interface VFGModelCarouselItem : NSObject
- (nonnull instancetype)initWithIndex:(NSInteger)index id:(NSString * _Nonnull)id name:(NSString * _Nonnull)name showSelectionIcon:(BOOL)showSelectionIcon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11VFGCommonUI23VFGNavigationController")
@interface VFGNavigationController : UINavigationController
/// a boolean for enable night mode for the navigation controller
@property (nonatomic) BOOL nightMode;
/// a boolean for enable background animation in transation
@property (nonatomic) BOOL backGroundAnimation;
/// Custom background image for the navigation controller
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
/// Default morning image for first level view controller
@property (nonatomic, strong) UIImage * _Nullable morningLevelOneImage;
/// Default morning image for second level view controllers
@property (nonatomic, strong) UIImage * _Nullable morningLevelTwoImage;
/// Default evening image for first level view controller
@property (nonatomic, strong) UIImage * _Nullable eveningLevelOneImage;
/// Default evening image for second level view controllers
@property (nonatomic, strong) UIImage * _Nullable eveningLevelTwoImage;
- (void)viewDidLoad;
- (void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers animated:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface VFGNavigationController (SWIFT_EXTENSION(VFGCommonUI)) <UINavigationControllerDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11VFGCommonUI42VFGNavigationControllerTransitionAnimation")
@interface VFGNavigationControllerTransitionAnimation : NSObject <UIViewControllerAnimatedTransitioning>
@property (nonatomic) BOOL isPush;
@property (nonatomic) double transitionDuration;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI20VFGPasswordTextField")
@interface VFGPasswordTextField : VFGBaseTextField
@property (nonatomic, copy) void (^ _Nullable showPasswordAction)(BOOL);
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


SWIFT_CLASS("_TtC11VFGCommonUI16VFGPrimaryButton")
@interface VFGPrimaryButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI23VFGPullToRefreshControl")
@interface VFGPullToRefreshControl : NSObject
/// Used to properly display the <em>last update</em> message in the <em>offline ribbon</em>.
/// Probably it should be set from any <em>persistence system</em> (such as <code>UserDefaults</code>, <code>CoreDarta</code>, etc.) implemented by the local markets.
@property (nonatomic, copy) NSDate * _Nullable lastUpdate;
/// The message to display when data <em>has never been updated</em>. The default value is <em>Never</em>.
@property (nonatomic, copy) NSString * _Nonnull nerverUpdatedMessage;
/// Builds the message to be displayed by the offline ribbon.
/// The message is built based on <code>lastUpdate</code>, <code>nerverUpdatedMessage</code> and <code>timeframeControl</code> values.
/// If there is no value available for <code>lastUpdate</code>, it will return the value set for <code>nerverUpdatedMessage</code>,
/// otherwise, it will return the string resolved by the <code>timeframeControl</code> configuration.
@property (nonatomic, readonly, copy) NSString * _Nonnull lastUpdateMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end












@interface VFGPullToRefreshControl (SWIFT_EXTENSION(VFGCommonUI))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// Definitions for Notifications & userInfo keys for responsive UI elements
SWIFT_CLASS("_TtC11VFGCommonUI15VFGResponsiveUI")
@interface VFGResponsiveUI : NSObject
/// Show inbox notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSNotificationName _Nonnull onShowInboxNotification;)
+ (NSNotificationName _Nonnull)onShowInboxNotification SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnShowInboxNotification:(NSNotificationName _Nonnull)value;
/// Badge refresh notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSNotificationName _Nonnull onBadgeReshreshNotification;)
+ (NSNotificationName _Nonnull)onBadgeReshreshNotification SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnBadgeReshreshNotification:(NSNotificationName _Nonnull)value;
/// Badge string key in userInfo of onBadgeReshreshNotification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull badgeStringKey;)
+ (NSString * _Nonnull)badgeStringKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setBadgeStringKey:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class VFGTopBar;
@class VFGSideMenuViewController;
@class UIStoryboardSegue;

SWIFT_CLASS("_TtC11VFGCommonUI21VFGRootViewController")
@interface VFGRootViewController : UIViewController
/// Top Bar containing navigation buttons.
@property (nonatomic, weak) IBOutlet VFGTopBar * _Null_unspecified topBar;
/// Show Nudge View with Data
/// @param title Optinal String, title of Nudge view
/// @param description String, description of Nudge view
/// @param primaryButtonTitle String, primary Button Title of Nudge view
/// @param secondaryButtonTitle String, secondary Button Title of Nudge view
/// @param primaryButtonAction Optinal callback, primary Button Action of Nudge view
/// @param secondaryButtonAction Optinal callback, secondary Button Action of Nudge view
/// @param closeAction Optinal callback, close Action of Nudge view
- (void)showNudgeViewWithTitle:(NSString * _Nullable)title description:(NSString * _Nonnull)description primaryButtonTitle:(NSString * _Nullable)primaryButtonTitle secondaryButtonTitle:(NSString * _Nullable)secondaryButtonTitle primaryButtonAction:(void (^ _Nullable)(void))primaryButtonAction secondaryButtonAction:(void (^ _Nullable)(void))secondaryButtonAction closeAction:(void (^ _Nonnull)(void))closeAction;
- (void)hideNudgeView;
/// Side menu which is presented when user clicks on menu button.
@property (nonatomic, readonly, strong) VFGSideMenuViewController * _Nonnull sideMenu;
@property (nonatomic, strong) VFGFloatingBubbleView * _Nullable floatingBubble;
@property (nonatomic, strong) VFGNavigationController * _Null_unspecified containerNavigationController;
@property (nonatomic) CGFloat statusBarAlpha;
/// This property returns singleton instance of root view controller.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VFGRootViewController * _Nonnull shared;)
+ (VFGRootViewController * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Set root view controller which view is presented as first top screen.
- (void)setRootViewController:(UIViewController * _Nonnull)viewController;
/// Push view controller on navigation stack
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
/// Pop view controller which is on top of navigation stack.
- (void)popToRootViewControllerWithAnimated:(BOOL)animated;
/// Pop view controller which is on top of navigation stack.
- (void)popViewControllerWithAnimated:(BOOL)animated;
/// Show view controllers on the top of root view controller
- (void)showOnRootController:(NSArray<UIViewController *> * _Nonnull)viewControllers animated:(BOOL)animated;
- (void)fadeInOverlayWithDuration:(NSTimeInterval)duration;
- (void)fadeOutOverlayWithDuration:(NSTimeInterval)duration;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
@property (nonatomic, copy) void (^ _Nullable backTapClosure)(void);
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class VFGScrollableTabBarItem;
@protocol VFGScrollableTabBarDelegate;
@class UICollectionViewLayout;

/// Custom view that contains a TabBar that can be scrolled
SWIFT_CLASS("_TtC11VFGCommonUI19VFGScrollableTabBar")
@interface VFGScrollableTabBar : UIView <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
/// The initial selected item index, default = 0
@property (nonatomic) NSInteger initialSelectedIndex;
/// The number of maximum items on screen without scrolling the tabBar, default = 4
@property (nonatomic) NSInteger maxItemsCountWithoutScrolling;
/// Enable tabBar scrolling, default = true
@property (nonatomic) BOOL isScrollingEnabled;
/// Show half of the next scrolling item , default = true
@property (nonatomic) BOOL shouldShowHalfItemWhenScrolling;
/// The items of the tabBar
@property (nonatomic, copy) NSArray<VFGScrollableTabBarItem *> * _Nonnull tabBarItems;
/// The image tint Color for the selected item
@property (nonatomic, strong) UIColor * _Nullable selectedItemTintColor;
/// The image tint Color for the enabled items
@property (nonatomic, strong) UIColor * _Nullable enabledItemTintColor;
/// The title font of the tabBar items
@property (nonatomic, strong) UIFont * _Nullable itemTitleFont;
/// The view which displays the view controllers for the tabBar
@property (nonatomic, weak) UIView * _Nullable viewControllersContainerView;
/// The delegate for VFGScrollableTabBar
@property (nonatomic, weak) id <VFGScrollableTabBarDelegate> _Nullable delegate;
/// The parent view controller which contains the tabBar
@property (nonatomic, weak) UIViewController * _Nullable parentViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)reloadData;
- (void)triggerOrUnTriggerNotificationIconAtTabBarItemsWithIndex:(NSInteger)index triggerOn:(BOOL)triggerOn;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// The delegate for scrollable tabBar callBack methods
SWIFT_PROTOCOL("_TtP11VFGCommonUI27VFGScrollableTabBarDelegate_")
@protocol VFGScrollableTabBarDelegate <NSObject>
- (void)scrollableTabBar:(VFGScrollableTabBar * _Nonnull)scrollableTabBar didSelectItemAt:(NSInteger)index didSwitchToViewController:(BOOL)didSwitchToViewController;
@end

enum VFGScrollableTabBarItemStatus : NSInteger;

SWIFT_CLASS("_TtC11VFGCommonUI23VFGScrollableTabBarItem")
@interface VFGScrollableTabBarItem : NSObject
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, strong) UIViewController * _Nullable viewController;
@property (nonatomic) enum VFGScrollableTabBarItemStatus status;
@property (nonatomic, strong) UIImage * _Nullable normalImage;
@property (nonatomic, strong) UIImage * _Nullable notificationImage;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image viewController:(UIViewController * _Nullable)viewController;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image NotificationImage:(UIImage * _Nullable)NotificationImage;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image status:(enum VFGScrollableTabBarItemStatus)status OBJC_DESIGNATED_INITIALIZER;
- (void)switchToNewNotificationModeWithHasNewNotification:(BOOL)hasNewNotification;
- (BOOL)ItemIconIsNewNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VFGScrollableTabBarItemStatus) {
  VFGScrollableTabBarItemStatusEnabled = 0,
  VFGScrollableTabBarItemStatusSelected = 1,
  VFGScrollableTabBarItemStatusDisabled = 2,
};


SWIFT_CLASS("_TtC11VFGCommonUI18VFGSecondaryButton")
@interface VFGSecondaryButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI25VFGSettingsViewController")
@interface VFGSettingsViewController : UIViewController
@property (nonatomic, strong) id <SettingDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nonnull rootViewControllerContentTopBarTitle;
@property (nonatomic, strong) VFGTopBarScrollDelegate * _Nullable rootViewControllerContentTopBarScrollDelegate;
@property (nonatomic) BOOL topBarRightButtonHidden;
+ (VFGSettingsViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface VFGSettingsViewController (SWIFT_EXTENSION(VFGCommonUI)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface VFGSettingsViewController (SWIFT_EXTENSION(VFGCommonUI)) <UITableViewDelegate>
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC11VFGCommonUI31VFGSettingsWarningTableViewCell")
@interface VFGSettingsWarningTableViewCell : UITableViewCell
- (void)setupWithMessage:(NSString * _Nonnull)message;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI13VFGShadowView")
@interface VFGShadowView : UIView
@property (nonatomic) CGFloat chipHeight;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Represents item in menu.
SWIFT_CLASS("_TtC11VFGCommonUI15VFGSideMenuItem")
@interface VFGSideMenuItem : NSObject
/// Menu item id.
@property (nonatomic, readonly) NSInteger id;
/// Menu item title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Menu item image.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Menu right item image.
@property (nonatomic, strong) UIImage * _Nullable rightImage;
/// Sub menu items for this menu item.
@property (nonatomic, readonly, copy) NSArray<VFGSideMenuItem *> * _Nonnull subitems;
/// Should item contain separator at the bottom.
@property (nonatomic) BOOL separator;
/// Should the item be visible or not.
@property (nonatomic) BOOL visible;
/// parentItem if this item is child and have parent item,may be nil.
@property (nonatomic, weak) VFGSideMenuItem * _Nullable parentItem;
/// is the item currently selected in the menu or not
@property (nonatomic) BOOL isItemSelected;
/// Hash of the item. Function computes hash based on object title, image and presence of separator. Hash is computed by doing xor of hashes of given values.
@property (nonatomic, readonly) NSInteger hashValue;
/// Create menu item object.
/// \param title Menu item title
///
/// \param image Menu item image
///
/// \param separator True if element should contain separator view
///
/// \param subitems Sub menu items for given menu (if given menu item can expand)
///
- (nonnull instancetype)initWithId:(NSInteger)id title:(NSString * _Nonnull)title image:(UIImage * _Nullable)image separator:(BOOL)separator subitems:(NSArray<VFGSideMenuItem *> * _Nonnull)subitems OBJC_DESIGNATED_INITIALIZER;
/// Create menu item object.
/// \param title Menu item title
///
/// \param image Menu item image
///
/// \param separator True if element should contain separator view
///
/// \param subitems Sub menu items for given menu (if given menu item can expand)
///
/// \param visible True if element should be visible by default
///
- (nonnull instancetype)initWithId:(NSInteger)id title:(NSString * _Nonnull)title image:(UIImage * _Nullable)image separator:(BOOL)separator subitems:(NSArray<VFGSideMenuItem *> * _Nonnull)subitems visible:(BOOL)visible;
/// Create menu item object.
/// \param title Menu item title
///
/// \param image Menu item image
///
/// \param separator True if element should contain separator view
///
/// \param subitems Sub menu items for given menu (if given menu item can expand)
///
/// \param rightImage Menu item image
///
- (nonnull instancetype)initWithId:(NSInteger)id title:(NSString * _Nonnull)title image:(UIImage * _Nullable)image separator:(BOOL)separator subitems:(NSArray<VFGSideMenuItem *> * _Nonnull)subitems rightImage:(UIImage * _Nullable)rightImage;
/// Returns number of subitems in given menu item.
- (NSInteger)subitemsCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// View controller containing side menu.
SWIFT_CLASS("_TtC11VFGCommonUI25VFGSideMenuViewController")
@interface VFGSideMenuViewController : UIViewController
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
/// Callback called when item at given row in menu was clicked.
@property (nonatomic, copy) void (^ _Nullable itemAtRowClickedCallback)(NSInteger, VFGSideMenuItem * _Nonnull);
- (void)clearLastSelectedMenuItem;
- (void)changeCurrentViewController;
/// Loads and initializes side menu view controller. View controller is added to desired view controller and as a subview of view controller’s view
+ (VFGSideMenuViewController * _Nonnull)sideMenuViewControllerInViewController:(UIViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Loads and initializes side menu view controller. View controller is added to desired view controller and view is added to containerView.
+ (VFGSideMenuViewController * _Nonnull)sideMenuViewControllerInViewController:(UIViewController * _Nonnull)controller containerView:(UIView * _Nonnull)containerView SWIFT_WARN_UNUSED_RESULT;
/// Show side menu with or without animation.
/// \param withAnimation True if showing of side menu should be animated
///
- (void)showMenuWithAnimation:(BOOL)withAnimation;
/// Hide side menu with or without animation.
/// \param withAnimation True if hidding of side menu should be animated
///
- (void)hideMenuWithAnimation:(BOOL)withAnimation;
/// Layout side menu in its parent view. Menu can be shown or hidden.
- (void)layoutMenu;
/// Sets menu items which are displayed in menu
/// \param items Items displayed in menu
///
- (void)setMenuItems:(NSArray<VFGSideMenuItem *> * _Nonnull)items;
/// Set text on badge on given item
/// \param text Text displayed on badge
///
/// \param item Menu item for which text is displayed
///
- (void)setBadgeText:(NSString * _Nullable)text forMenuItem:(VFGSideMenuItem * _Nonnull)item;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MessageView;

SWIFT_CLASS("_TtC11VFGCommonUI11VFGSnackbar")
@interface VFGSnackbar : NSObject
/// View which will be passed to SwiftMessages.show(). This property can be used to customize message displayed by SwiftMessages pod.
@property (nonatomic, strong) MessageView * _Nonnull messageView;
- (void)showWithMessage:(NSString * _Nonnull)message duration:(NSTimeInterval)duration image:(UIImage * _Nullable)image;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// VFGSwipeableTableViewCell table cell which displays custom options with image and text after doing swipe on a cell. Cell has to be used with VFGBlockableTableView. Your table cell class should subclass VFGSwipeableTableViewCell. To actually use it you’ll need set VFGCellOptionsView on the .optionViewproperty. VFGCellOptionsView init expects array of [VFGCellOption]. The VFGCellOption serves as a view model for each custom VFGCellOptionsButton button (you should not be needing to explicitly use VFGCellOptionsButton class if standard functionality is sufficient).
SWIFT_CLASS("_TtC11VFGCommonUI25VFGSwipeableTableViewCell")
@interface VFGSwipeableTableViewCell : UITableViewCell
- (BOOL)isCurrentDeviceIpad SWIFT_WARN_UNUSED_RESULT;
- (UIUserInterfaceIdiom)getDeviceType SWIFT_WARN_UNUSED_RESULT;
/// View with custom options. has to be set by subclasses or when constructing the cell.
@property (nonatomic, strong) VFGCellOptionsView * _Nullable optionsView;
/// Informs if cell displays custom options.
@property (nonatomic) BOOL areOptionsPresented;
/// Returns VFGBlockableTableView table in which this cell is present.
- (VFGBlockableTableView * _Nullable)vfgBlockableTableView SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
/// Present or hide cell custom options.
/// \param present true to present options, false to hide
///
/// \param withAnimation animate hiding or showing of options
///
- (void)presentOptionsWithPresent:(BOOL)present withAnimation:(BOOL)isAnimating;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI13VFGSwitchCell")
@interface VFGSwitchCell : UITableViewCell
@property (nonatomic, copy) void (^ _Nullable onToggleActionComplete)(BOOL);
- (void)setupWithTitle:(NSString * _Nonnull)title isStripViewHidden:(BOOL)isStripViewHidden isSwitchOn:(BOOL)isSwitchOn;
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI24VFGSwitchCellWithMessage")
@interface VFGSwitchCellWithMessage : UITableViewCell
@property (nonatomic, copy) void (^ _Nullable onToggleActionComplete)(BOOL);
@property (nonatomic, copy) NSString * _Nullable cellMessage;
- (void)setupWithTitle:(NSString * _Nonnull)title isSwitchOn:(BOOL)isSwitchOn;
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11VFGCommonUI17VFGTertiaryButton")
@interface VFGTertiaryButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Top bar visible at top of the screen. Contains two buttons, left and right, and title.
SWIFT_CLASS("_TtC11VFGCommonUI9VFGTopBar")
@interface VFGTopBar : UIView
/// Height of top bar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat topBarHeight;)
+ (CGFloat)topBarHeight SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified leftButton;
@property (nonatomic, readonly, strong) VFGBadgeButton * _Null_unspecified rightButton;
/// Title displayed when top bar is not transparent
@property (nonatomic, copy) NSString * _Nullable title;
/// Background color for not transparent top bar
@property (nonatomic, strong) UIColor * _Nullable opaqueBackgroundColor;
/// Alpha value of top bar header and background
@property (nonatomic) CGFloat opaqueBackgroundAlpha;
/// Standard initialiser as in UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Standard initialiser as in UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Standard layoutSubviews
- (void)layoutSubviews;
@end


/// Delegate responsible for changing position and visual appearance of top bar based on given scroll offset
SWIFT_CLASS("_TtC11VFGCommonUI23VFGTopBarScrollDelegate")
@interface VFGTopBarScrollDelegate : NSObject
/// Initial y origin of top bar, when there is no scroll offset
@property (nonatomic) CGFloat topBarInitialY;
/// Y scroll offset from which to start changing background alpha to transparent
@property (nonatomic) CGFloat alphaChangeYPosition;
/// Call to update current state, position and opacity of a top bar.
- (void)refresh;
/// Call to inform delegate that view offset has changed and thus top bar position,
/// \param withOffset Current scroll offset
///
- (void)didScrollWithOffset:(CGFloat)offset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol VFGWebViewDelegate;

/// Generic View Controller for displaying web contents on a webView
SWIFT_CLASS("_TtC11VFGCommonUI20VFGWebViewController")
@interface VFGWebViewController : UIViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull urlEndString;)
+ (NSString * _Nonnull)urlEndString SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable campaignId;
/// The requested URL
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) BOOL closeButtonIsHidden;
/// The requested URL
@property (nonatomic, weak) id <VFGWebViewDelegate> _Nullable delegate;
/// Initialize View Controller of type ‘VFGWebViewController’
///
/// returns:
/// VFGWebViewController instance
+ (VFGWebViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIWebView;

@interface VFGWebViewController (SWIFT_EXTENSION(VFGCommonUI)) <UIWebViewDelegate>
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP11VFGCommonUI18VFGWebViewDelegate_")
@protocol VFGWebViewDelegate <NSObject>
- (void)webView:(UIWebView * _Nonnull)webview didFailLoadWithError:(NSError * _Nullable)error;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWith:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
@end


/// Responsible for updating badge text for “Your Messages” menu item based on Your Messages Badge Refresh Notification.
SWIFT_CLASS("_TtC11VFGCommonUI27VFGYourMessagesBadgeRefresh")
@interface VFGYourMessagesBadgeRefresh : NSObject
/// Text displayed on badge.
@property (nonatomic, copy) NSString * _Nullable badgeText;
/// “Your messages” Menu item on which to display badge text.
@property (nonatomic, strong) VFGSideMenuItem * _Nullable sideMenuItem;
/// Menu containing menu item.
@property (nonatomic, strong) VFGSideMenuViewController * _Nullable sideMenu;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
