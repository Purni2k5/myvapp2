// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VFGCommonUtils",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_PROTOCOL("_TtP14VFGCommonUtils13ComponentHost_")
@protocol ComponentHost <NSObject>
- (void)componentDidGenerateEvent:(NSString * _Nonnull)event;
@end

@class VFGContentManager;
@class UIView;
@class UIViewController;

SWIFT_PROTOCOL("_TtP14VFGCommonUtils17ComponentManifest_")
@protocol ComponentManifest <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull componentName;
@property (nonatomic, readonly, copy) NSString * _Nonnull componentVersion;
@property (nonatomic, weak) id <ComponentHost> _Nullable delegate;
+ (id <ComponentManifest> _Nonnull)startComponent SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopComponent SWIFT_WARN_UNUSED_RESULT;
- (void)setContentManager:(VFGContentManager * _Nonnull)contentManager;
@optional
- (UIView * _Nonnull)componentView SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)componentViewController SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ContentSource) {
  ContentSourceLocal = 0,
  ContentSourceDynamic = 1,
};








@interface UIScreen (SWIFT_EXTENSION(VFGCommonUtils))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isPhone;)
+ (BOOL)isPhone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isIpad;)
+ (BOOL)isIpad SWIFT_WARN_UNUSED_RESULT;
@end




/// @class VFGAdobeMobileSDKHandler
/// This class is used for handling with the Adobe Mobile SDK.
SWIFT_CLASS("_TtC14VFGCommonUtils24VFGAdobeMobileSDKHandler")
@interface VFGAdobeMobileSDKHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VFGCommonUtils12VFGAnalytics")
@interface VFGAnalytics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull trackEventClosure)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull);)
+ (void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))trackEventClosure SWIFT_WARN_UNUSED_RESULT;
+ (void)setTrackEventClosure:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull trackViewClosure)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull);)
+ (void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))trackViewClosure SWIFT_WARN_UNUSED_RESULT;
+ (void)setTrackViewClosure:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))value;
+ (void)trackEvent:(NSString * _Nonnull)title dataSources:(NSDictionary<NSString *, id> * _Nonnull)dataSources;
+ (void)trackView:(NSString * _Nonnull)title dataSources:(NSDictionary<NSString *, id> * _Nonnull)dataSources;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration of the CommonUtils component stored in encrypted CoreData
SWIFT_CLASS("_TtC14VFGCommonUtils16VFGConfiguration")
@interface VFGConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSLocale * _Null_unspecified locale;)
+ (NSLocale * _Null_unspecified)locale SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocale:(NSLocale * _Null_unspecified)newLocale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the content manager that should be used to get localized strings
/// <ul>
///   <li>
///     Integration with VFGContentManager:
///   </li>
///   <li>
///     Call the init method at the component intilaization.
///   </li>
///   <li>
///     Replace calling ‘NSLocalizedString’ with calling this new method ‘getString’ from This Class
///   </li>
///   <li>
///     Please note that if remote dictionary is empty or nil, the source will be set to local automatically 💡
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14VFGCommonUtils17VFGContentManager")
@interface VFGContentManager : NSObject
@property (nonatomic, strong) NSBundle * _Nonnull sourceBundle;
/// Content manager intializer
/// <ul>
///   <li>
///     Please note that if remote dictionary is empty or nil, the source will be set to local automatically💡
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     remoteDictionary: dictionary loaded from the remote JSON file.
///   </li>
///   <li>
///     content: source that should be used to return the localized string
///   </li>
/// </ul>
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)remoteDictionary andSource:(enum ContentSource)type OBJC_DESIGNATED_INITIALIZER;
/// \param key the key used to get the localized string
///
///
/// returns:
/// the localized string
- (NSString * _Nonnull)stringWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This helper structs allows developers to determine if app should be in day or night mode.
SWIFT_CLASS("_TtC14VFGCommonUtils17VFGDayNightHelper")
@interface VFGDayNightHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double GPSDisabledValue;)
+ (double)GPSDisabledValue SWIFT_WARN_UNUSED_RESULT;
/// Sunrise hour (in 24h format) which will be used in non-GPS mode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSUInteger sunriseHour;)
+ (NSUInteger)sunriseHour SWIFT_WARN_UNUSED_RESULT;
+ (void)setSunriseHour:(NSUInteger)value;
/// Sunset hour (in 24h format) which will be used in non-GPS mode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSUInteger sunsetHour;)
+ (NSUInteger)sunsetHour SWIFT_WARN_UNUSED_RESULT;
+ (void)setSunsetHour:(NSUInteger)value;
/// This function calculates day/night status based on GPS or configured sunrise/sunset hours.
/// Params are optional and are needed only for GPS mode.
/// \param latitude latitude returned by core location or from any other source. This parameter is optional.
///
/// \param longitude longitude returned by core location or from any other source. This parameter is optional.
///
///
/// returns:
/// true for day mode, false for night mode.
+ (BOOL)isDayWithLatitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VFGCommonUtils14VFGEnvironment")
@interface VFGEnvironment : NSObject
/// Dictionary of registered group components. Use component name as a key and version as value.
/// (eg. “VFGCommonUtils” : “1.0.0”)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nonnull registeredComponents;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)registeredComponents SWIFT_WARN_UNUSED_RESULT;
+ (void)setRegisteredComponents:(NSDictionary<NSString *, NSString *> * _Nonnull)value;
/// Determines whether application is running on Simulator.
///
/// returns:
/// true if running on simulator, false otherwise
+ (BOOL)isSimulator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class describes error object which will be used by app to communicate group components errors to end user.
SWIFT_CLASS("_TtC14VFGCommonUtils8VFGError")
@interface VFGError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This is an error manager class which should be used by all the components to report errors.
SWIFT_CLASS("_TtC14VFGCommonUtils15VFGErrorManager")
@interface VFGErrorManager : NSObject
/// This method should be used to report errors which should be handled by VFGErrorManagerDelegate.
/// @param error VFGError object to report.
/// @return returns recovery action code from ErrorManagerDelegate.
- (NSInteger)reportError:(VFGError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This protocol should be implemented by some object (viewcontroller?) on the application side which will be responsible
/// for displaying error messages to end user.
SWIFT_PROTOCOL("_TtP14VFGCommonUtils23VFGErrorManagerDelegate_")
@protocol VFGErrorManagerDelegate <NSObject>
/// This method will be called when one of the group components will report an error.
/// @param error error object with all the informations needed to presesnt it to end user.
- (NSInteger)handleGroupComponentError:(VFGError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Vodafone Group default logger - used across all Vodafone frameworks
/// remark:
/// Logging mechanizm is available on Debug version of VFGCommonUtils.
/// Release version doesn’t log anything regardless of settings.
SWIFT_CLASS("_TtC14VFGCommonUtils9VFGLogger")
@interface VFGLogger : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable outputFilePath;)
+ (NSString * _Nullable)outputFilePath SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) SWIFT_METATYPE(VFGConfiguration) _Nonnull configuration;)
+ (SWIFT_METATYPE(VFGConfiguration) _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfiguration:(SWIFT_METATYPE(VFGConfiguration) _Nonnull)value;
+ (void)redirectLogsToFile SWIFT_DEPRECATED_MSG("since 2.1.0");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull loggingClosure)(NSString * _Nonnull);)
+ (void (^ _Nonnull)(NSString * _Nonnull))loggingClosure SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggingClosure:(void (^ _Nonnull)(NSString * _Nonnull))value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_CLASS("_TtC14VFGCommonUtils10VFGRoaming")
@interface VFGRoaming : NSObject
/// Determines whether device is using international roaming.
/// This is NOT using official Apple API, use with caution.
/// Local roaming is filtered out because the current approach could yield false positives
/// @return NSNumber with possible values true, false or nil for undefined (missing simcard)
+ (NSNumber * _Nullable)isInternationalRoamingActive SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VFGCommonUtils16VFGTealiumHelper")
@interface VFGTealiumHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VFGTealiumHelper * _Nonnull shared;)
+ (VFGTealiumHelper * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull tealiumInstanceID;
@property (nonatomic) BOOL tealiumEnabled;
@property (nonatomic, copy) void (^ _Nullable onNewMessagesCommand)(NSObject * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onGetOffersCommand)(NSObject * _Nullable);
+ (void)startTrackingWithAccount:(NSString * _Nonnull)account profile:(NSString * _Nonnull)profile environment:(NSString * _Nonnull)environment instanceID:(NSString * _Nonnull)instanceID;
/// Copy of all non persistent, UI object and dispatch specific data sources
/// captured by a Tealium library instance at time of call.
/// @return Dictionary of Tealium Data Source keys and values at time of call.
- (id _Nullable)getVolatileDataSources SWIFT_WARN_UNUSED_RESULT;
/// Adds additional data to the temporary data sources dictionary. This command
/// is added to the end of the current Tealium background queue for writing.
/// @param additionalDataSources New or overwrite data sources to add to the
/// volatile data sources store.  These key values can only be superceded by the
/// custom data sources added to track calls. If a value is an array, be sure to use
/// an array of strings.
- (void)addVolatileDataSources:(NSDictionary<NSString *, id> * _Nonnull)dataSources;
/// Copy of all persistent, UI object and dispatch specific data sources
/// captured by a Tealium library instance at time of call.
/// @return Dictionary of Tealium Data Source keys and values at time of call.
- (NSDictionary * _Nullable)getPersistentDataSources SWIFT_WARN_UNUSED_RESULT;
/// Adds additional data to the persistent data sources dictionary.
/// @param additionalDataSources New or overwrite data sources to add to the
/// persistent data sources store.
- (void)addPersistentDataSources:(NSDictionary<NSString *, id> * _Nonnull)dataSources;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface VFGTealiumHelper (SWIFT_EXTENSION(VFGCommonUtils))
- (BOOL)tealium:(NSObject * _Null_unspecified)tealium shouldDrop:(NSObject * _Null_unspecified)dispatch SWIFT_WARN_UNUSED_RESULT;
@end


@interface VFGTealiumHelper (SWIFT_EXTENSION(VFGCommonUtils))
- (void)addRemoteCommandForVovMessages;
@end

@class VFGTealiumHelperRemoteCommand;

SWIFT_PROTOCOL("_TtP14VFGCommonUtils24VFGTealiumHelperProtocol_")
@protocol VFGTealiumHelperProtocol <NSObject>
/// This method when be called when app will receive Tealium command.
/// \param command Tealium remote command object provided by VFGAnalytics
///
- (void)executeRemoteCommand:(VFGTealiumHelperRemoteCommand * _Nonnull)command;
@end

enum VFGTealiumHelperRemoteCommandType : NSInteger;

/// This class defines Tealium command object.
SWIFT_CLASS("_TtC14VFGCommonUtils29VFGTealiumHelperRemoteCommand")
@interface VFGTealiumHelperRemoteCommand : NSObject
/// This property stores raw remote command dictionary (same as in reasponse from Tealium).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable commandDictionary;
/// This property stores remote command type based on the raw command dictionary.
@property (nonatomic, readonly) enum VFGTealiumHelperRemoteCommandType commandType;
/// This property provides the name of the event which triggered this remote command.
@property (nonatomic, readonly, copy) NSString * _Nullable commandEventName;
/// Default constructor.
/// <ul>
///   <li>
///     parameter: raw remote command dictionary (event field content).
///   </li>
/// </ul>
- (nonnull instancetype)initWithObject:(NSObject * _Nullable)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// This enumeration defines possible remote command types
typedef SWIFT_ENUM(NSInteger, VFGTealiumHelperRemoteCommandType) {
  VFGTealiumHelperRemoteCommandTypeUnknown = 0,
  VFGTealiumHelperRemoteCommandTypeGeneric = 1,
  VFGTealiumHelperRemoteCommandTypeCampaign = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
